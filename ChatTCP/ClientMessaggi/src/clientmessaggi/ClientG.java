package clientmessaggi;

import Messaggio.Messaggio;
import java.awt.Color;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.HashMap;
import javax.swing.BorderFactory;
import javax.swing.DefaultListModel;

/**
 *
 * @author Francesco Forcellato
 */
public class ClientG extends javax.swing.JFrame {

    private DefaultListModel<String> account;
    private DefaultListModel<String> contatore;
    private ClientMessaggi client;
    private String userSelezionato;
    private HashMap<String, DefaultListModel> conversazioni;

    /**
     * Creates new form ClientG
     */
    public ClientG() {
        super("Client");
        inizializza();
    }

    public ClientG(ClientMessaggi client, HashMap<String, DefaultListModel> conversazioni) {
        super(client.getUsername());
        this.client = client;
        this.conversazioni = conversazioni;
        inizializza();
    }

    private void inizializza() {
        initComponents();
        Color sfondo = new Color(170, 245, 255);
        Color messaggi = new Color(170, 245, 255);
        this.getContentPane().setBackground(sfondo);
        //lstMessaggi.setForeground(Color.white);
        pnlMessaggi.setBackground(sfondo);
        lstAccount.setBackground(sfondo);
        lstContatore.setBackground(sfondo);
        lstMessaggi.setBackground(messaggi);
        lblErrore.setVisible(false);
        account = new DefaultListModel();
        lstAccount.setModel(account);
        lstAccount.setBorder(BorderFactory.createEmptyBorder());
        lstContatore.setBorder(BorderFactory.createEmptyBorder());
        jScrollPane1.setBorder(BorderFactory.createEmptyBorder());
        lstMessaggi.setBorder(BorderFactory.createEmptyBorder());
        jScrollPane2.setBorder(BorderFactory.createEmptyBorder());
        jScrollPane3.setBorder(BorderFactory.createEmptyBorder());
        jScrollPane3 = jScrollPane1;
        DefaultListModel h = new DefaultListModel();
        h.addElement("Seleziona una conversazione");
        lstMessaggi.setModel(h);
        contatore = new DefaultListModel();
    }

    public void errore(String messaggio) {
        lblErrore.setVisible(true);
        lblErrore.setText(messaggio);
    }

    public void setConversazioni(HashMap<String, DefaultListModel> conversazioni) {
        this.conversazioni = conversazioni;
    }

    public void inviaMessaggio(String messaggio) {
        if (messaggio != null && messaggio.compareTo("") != 0 && userSelezionato != null) {
            try {
                String data = new SimpleDateFormat("dd.MM.yyyy hh:mm:ss aaa").format(Calendar.getInstance().getTime());
                Messaggio m = new Messaggio(client.getUsername(), userSelezionato, messaggio, data);
                client.invio(m);
            } catch (IOException ex) {
                //Logger.getLogger(ClientG.class.getName()).log(Level.SEVERE, null, ex);
                errore(ex.toString());
            }
        }
    }

    public void setAccount(DefaultListModel<String> m) {
        account = m;
        lstAccount.setModel(account);
        contatore = new DefaultListModel();
        for (int i = 0; i < account.size(); i++) {
            contatore.addElement("\n");
        }
        lstContatore.setModel(contatore);
    }

    public void scriviMessaggio(Messaggio m) {
        if (userSelezionato == null || (userSelezionato.compareTo(m.getDestinatario()) != 0 && userSelezionato.compareTo(m.getMittente()) != 0)) {
            if (account.contains(m.getDestinatario())) {
                contatore.set(account.indexOf(m.getDestinatario()), contatore.get(account.indexOf(m.getDestinatario())).compareTo("\n") == 0 ? "1" : Integer.parseInt((String) contatore.get(account.indexOf(m.getDestinatario()))) + 1 + "");
            } else {
                contatore.set(account.indexOf(m.getMittente()), contatore.get(account.indexOf(m.getMittente())).compareTo("\n") == 0 ? "1" : Integer.parseInt((String) contatore.get(account.indexOf(m.getMittente()))) + 1 + "");
            }
        } else {
            contatore.set(account.indexOf(userSelezionato), "\n");
        }
        conversazioni.get(m.getDestinatario().compareTo(client.getUsername()) == 0 ? m.getMittente() : m.getDestinatario()).addElement(m.getMittente().compareTo(client.getUsername()) == 0 ? "Io: " + m.getMessaggio() : m.getMittente() + ": " + m.getMessaggio());
        jScrollPane2.getVerticalScrollBar().setValue(jScrollPane2.getVerticalScrollBar().getMaximum());
        lstMessaggi.ensureIndexIsVisible(lstMessaggi.getModel().getSize() - 1);
        lstMessaggi.repaint();
        this.repaint();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblTitolo = new javax.swing.JLabel();
        lblErrore = new javax.swing.JLabel();
        pnlMessaggi = new javax.swing.JPanel();
        btnInvia = new javax.swing.JButton();
        txtInvia = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        lstAccount = new javax.swing.JList<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        lstMessaggi = new javax.swing.JList<>();
        jScrollPane3 = new javax.swing.JScrollPane();
        lstContatore = new javax.swing.JList<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));

        lblTitolo.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        lblTitolo.setText("Client");

        lblErrore.setForeground(new java.awt.Color(255, 51, 0));
        lblErrore.setText("Errore");

        btnInvia.setText(">");
        btnInvia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInviaActionPerformed(evt);
            }
        });

        txtInvia.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        txtInvia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtInviaActionPerformed(evt);
            }
        });

        lstAccount.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        lstAccount.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lstAccountMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                lstAccountMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                lstAccountMouseReleased(evt);
            }
        });
        jScrollPane1.setViewportView(lstAccount);

        lstMessaggi.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lstMessaggi.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane2.setViewportView(lstMessaggi);

        lstContatore.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane3.setViewportView(lstContatore);

        javax.swing.GroupLayout pnlMessaggiLayout = new javax.swing.GroupLayout(pnlMessaggi);
        pnlMessaggi.setLayout(pnlMessaggiLayout);
        pnlMessaggiLayout.setHorizontalGroup(
            pnlMessaggiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlMessaggiLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlMessaggiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlMessaggiLayout.createSequentialGroup()
                        .addComponent(txtInvia)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnInvia))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 618, Short.MAX_VALUE))
                .addContainerGap())
        );
        pnlMessaggiLayout.setVerticalGroup(
            pnlMessaggiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMessaggiLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlMessaggiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlMessaggiLayout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlMessaggiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnInvia)
                            .addComponent(txtInvia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane3))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnlMessaggi, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblTitolo)
                            .addComponent(lblErrore))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblTitolo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlMessaggi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblErrore)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtInviaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtInviaActionPerformed
        inviaMessaggio(txtInvia.getText());
        txtInvia.setText("");
    }//GEN-LAST:event_txtInviaActionPerformed

    private void btnInviaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInviaActionPerformed
        inviaMessaggio(txtInvia.getText());
        txtInvia.setText("");
    }//GEN-LAST:event_btnInviaActionPerformed

    private void lstAccountMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lstAccountMouseClicked
        if (lstAccount.getSelectedValue() != null) {
            jScrollPane2.getVerticalScrollBar().setValue(jScrollPane2.getVerticalScrollBar().getMaximum());
            userSelezionato = lstAccount.getSelectedValue();
            lblTitolo.setText(userSelezionato);
            txtInvia.setText("");
            lstMessaggi.setModel(conversazioni.get(userSelezionato));
            contatore.set(account.indexOf(userSelezionato), "\n");
        }
    }//GEN-LAST:event_lstAccountMouseClicked

    private void lstAccountMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lstAccountMousePressed
        lstAccountMouseClicked(evt);
    }//GEN-LAST:event_lstAccountMousePressed

    private void lstAccountMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lstAccountMouseReleased
        lstAccountMouseClicked(evt);
    }//GEN-LAST:event_lstAccountMouseReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ClientG.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ClientG.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ClientG.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ClientG.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ClientG().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnInvia;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lblErrore;
    private javax.swing.JLabel lblTitolo;
    private javax.swing.JList<String> lstAccount;
    private javax.swing.JList<String> lstContatore;
    private javax.swing.JList<String> lstMessaggi;
    private javax.swing.JPanel pnlMessaggi;
    private javax.swing.JTextField txtInvia;
    // End of variables declaration//GEN-END:variables
}
